// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}


model User {
  id                 String    @id @default(cuid())
  name               String?
  email              String?   @unique
  emailVerified      DateTime?
  image              String?

  stock              Stock[]
  faq                Faq[]
  accounts           Account[]
  sessions           Session[]
  likes              Like[]
  comments           Comment[]
}

model Comment {
  id                Int       @id @default(autoincrement())
  createdAt         DateTime  @default(now())
  body              String
  srcId             Int
  userId            String

  stock             Stock     @relation(fields:[srcId], references:[id], onDelete: Cascade)
  user              User      @relation(fields:[userId], references:[id], onDelete: Cascade)
  @@index([srcId, userId])
}

model VerificationToken {
  identifier         String
  token              String   @unique
  expires            DateTime

  @@unique([identifier, token])
}

model Stock {
  id                Int         @id @default(autoincrement())
  title             String      @db.VarChar(30)
  tags              String?
  images            String[]
  desc              String
  price             Int
  lat               String?
  lng               String?
  userId            String
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  user              User      @relation(fields: [userId], references: [id])

  likes             Like[]
  comments          Comment[]
  @@index([userId])
}

model Like {
  id                Int       @id @default(autoincrement())
  createdAt         DateTime  @default(now())
  userId            String
  srcId             Int
  stock             Stock     @relation(fields:[srcId], references:[id], onDelete: Cascade)
  user              User      @relation(fields:[userId], references:[id], onDelete: Cascade)
}

model Faq {
  id                Int      @id @default (autoincrement())
  title             String
  desc              String
  userId            String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User      @relation(fields: [userId], references: [id])
  @@index([userId])
}